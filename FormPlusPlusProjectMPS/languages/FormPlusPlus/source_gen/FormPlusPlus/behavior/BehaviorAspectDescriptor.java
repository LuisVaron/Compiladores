package FormPlusPlus.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myListValues__BehaviorDescriptor = new ListValues__BehaviorDescriptor();
  private final BHDescriptor myLlValues__BehaviorDescriptor = new LlValues__BehaviorDescriptor();
  private final BHDescriptor myDocument__BehaviorDescriptor = new Document__BehaviorDescriptor();
  private final BHDescriptor myForm__BehaviorDescriptor = new Form__BehaviorDescriptor();
  private final BHDescriptor myFormComponent__BehaviorDescriptor = new FormComponent__BehaviorDescriptor();
  private final BHDescriptor myPanelFeatures__BehaviorDescriptor = new PanelFeatures__BehaviorDescriptor();
  private final BHDescriptor myPanelTitle__BehaviorDescriptor = new PanelTitle__BehaviorDescriptor();
  private final BHDescriptor mySize__BehaviorDescriptor = new Size__BehaviorDescriptor();
  private final BHDescriptor myBackground__BehaviorDescriptor = new Background__BehaviorDescriptor();
  private final BHDescriptor myColor__BehaviorDescriptor = new Color__BehaviorDescriptor();
  private final BHDescriptor myComponent__BehaviorDescriptor = new Component__BehaviorDescriptor();
  private final BHDescriptor myPanel__BehaviorDescriptor = new Panel__BehaviorDescriptor();
  private final BHDescriptor myTextBox__BehaviorDescriptor = new TextBox__BehaviorDescriptor();
  private final BHDescriptor myTextBoxFeatures__BehaviorDescriptor = new TextBoxFeatures__BehaviorDescriptor();
  private final BHDescriptor myText__BehaviorDescriptor = new Text__BehaviorDescriptor();
  private final BHDescriptor myComboBox__BehaviorDescriptor = new ComboBox__BehaviorDescriptor();
  private final BHDescriptor myComboBoxFeatures__BehaviorDescriptor = new ComboBoxFeatures__BehaviorDescriptor();
  private final BHDescriptor myList__BehaviorDescriptor = new List__BehaviorDescriptor();
  private final BHDescriptor myComboBoxValues__BehaviorDescriptor = new ComboBoxValues__BehaviorDescriptor();
  private final BHDescriptor myValuesValues__BehaviorDescriptor = new ValuesValues__BehaviorDescriptor();
  private final BHDescriptor myCheckBox__BehaviorDescriptor = new CheckBox__BehaviorDescriptor();
  private final BHDescriptor myButton__BehaviorDescriptor = new Button__BehaviorDescriptor();
  private final BHDescriptor myButtonFeatures__BehaviorDescriptor = new ButtonFeatures__BehaviorDescriptor();
  private final BHDescriptor myButtonOnClick__BehaviorDescriptor = new ButtonOnClick__BehaviorDescriptor();
  private final BHDescriptor myButtonAction__BehaviorDescriptor = new ButtonAction__BehaviorDescriptor();
  private final BHDescriptor myValuesvalue__BehaviorDescriptor = new Valuesvalue__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBackground__BehaviorDescriptor;
      case 1:
        return myButton__BehaviorDescriptor;
      case 2:
        return myButtonAction__BehaviorDescriptor;
      case 3:
        return myButtonFeatures__BehaviorDescriptor;
      case 4:
        return myButtonOnClick__BehaviorDescriptor;
      case 5:
        return myCheckBox__BehaviorDescriptor;
      case 6:
        return myColor__BehaviorDescriptor;
      case 7:
        return myComboBox__BehaviorDescriptor;
      case 8:
        return myComboBoxFeatures__BehaviorDescriptor;
      case 9:
        return myComboBoxValues__BehaviorDescriptor;
      case 10:
        return myComponent__BehaviorDescriptor;
      case 11:
        return myDocument__BehaviorDescriptor;
      case 12:
        return myForm__BehaviorDescriptor;
      case 13:
        return myFormComponent__BehaviorDescriptor;
      case 14:
        return myList__BehaviorDescriptor;
      case 15:
        return myListValues__BehaviorDescriptor;
      case 16:
        return myLlValues__BehaviorDescriptor;
      case 17:
        return myPanel__BehaviorDescriptor;
      case 18:
        return myPanelFeatures__BehaviorDescriptor;
      case 19:
        return myPanelTitle__BehaviorDescriptor;
      case 20:
        return mySize__BehaviorDescriptor;
      case 21:
        return myText__BehaviorDescriptor;
      case 22:
        return myTextBox__BehaviorDescriptor;
      case 23:
        return myTextBoxFeatures__BehaviorDescriptor;
      case 24:
        return myValuesValues__BehaviorDescriptor;
      case 25:
        return myValuesvalue__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f770L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f780L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f783L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f781L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f782L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77fL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f771L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f779L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77aL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77cL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f772L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76aL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76bL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76cL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77bL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x569314e2fbb68fafL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x569314e2fbb68fceL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f775L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76dL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76eL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76fL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f778L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f776L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f777L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77eL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a449817L)).seal();
}
