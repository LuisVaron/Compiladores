package FormPlusPlus.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Background_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Button_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ButtonAction_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ButtonFeatures_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ButtonOnClick_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new CheckBox_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Color_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ComboBox_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ComboBoxFeatures_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ComboBoxValues_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Component_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Document_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Form_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new FormComponent_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new List_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ListValues_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new LlValues_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Panel_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new PanelFeatures_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new PanelTitle_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Size_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Text_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new TextBox_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new TextBoxFeatures_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new ValuesValues_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Valuesvalue_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f770L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f780L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f783L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f781L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f782L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77fL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f771L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f779L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77aL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77cL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f772L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76aL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76bL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76cL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77bL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x569314e2fbb68fafL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x569314e2fbb68fceL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f775L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76dL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76eL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f76fL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f778L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f776L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f777L), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a39f77eL), MetaIdFactory.conceptId(0x33e7f45b147f42d0L, 0x86ff61e2bcaba42eL, 0x7e92237b5a449817L)).seal();
}
